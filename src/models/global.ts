import {
  IGeoAreaShape,
  PipelineEntryActivityType,
  QueryListEntryLightModel,
  MarketRadarQueryType,
  IDataItemLightModel,
  PubTransactionType,
  IPubLightModel,
  IPubCompetitorInfo,
  IGeoAddress,
  IPubFileInfo,
  IPubFinancialInfo,
  PubPictureInfo,
  IPubLeadInfo,
  IPubPipelineEntryInfo,
  IPubPrimaryInfo,
  IPubTrackingLightInfo,
  PubLightModel,
} from '@immosparrow/cockpit-api-v2';
export class OptionModel {
  value: number;
  text: string;
}

export interface GeoAreaShapeTravelParams {
  selectedTravelType: string;
  selectedTravelTime: number;
  selectedTravelStartTime?: string;
  selectedTravelRushHour?: boolean;
}
export interface IGeoAreaShapeExtendedData {
  polygonType: string;
  travelParams?: GeoAreaShapeTravelParams;
}

export interface IGeoAreaShapeExtent extends IGeoAreaShape {
  extendedData?: IGeoAreaShapeExtendedData;
}

export class Publication extends PubLightModel {
  constructor(object: PubLightModel) {
    super(object);
    this.selected = true;
  }
  selected: boolean;
}

export class ActivityModel {
  id: string;
  date: Date;
  startTime: string;
  duration: OptionModel;
  subject: string;
  message: string;
  overlaps: number;
  type: PipelineEntryActivityType;
  color?: string;
}
export class FilterOptionModel {
  value: number;
  text: string;
  leadStatusFilter: boolean;
  icon: boolean;
}

export class MinMax {
  min: number;
  max: number;
}

export class HistoryItem {
  // tslint:disable-next-line
  _model: IDataItemLightModel;
  id: string;
  isFavorite: boolean;
  name: string;
  isNameAutogenerated: boolean;
  transactionType: PubTransactionType;
  queryType: any;
  lastUsedTime: Date;
  usedCount: number;

  constructor(obj: QueryListEntryLightModel<MarketRadarQueryType>) {
    this.id = obj.id;
    this._model = obj['_model'];
    this.isFavorite = obj.isFavorite;
    this.name = obj.name;
    this.isNameAutogenerated = obj.isNameAutogenerated;
    this.transactionType = obj.transactionType;
    this.queryType = obj.queryType;
    this.lastUsedTime = obj.lastUsedTime;
    this.usedCount = obj.usedCount;
  }
}
